/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Controle;

import Modele.ChiffreDechiffre;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.Properties;

/**
 *
 * @author PC
 */
public class Configuration {
  
    private static final String CONFIG_FILE_ENCRYPTED = "src/Ressources/config.enc";
    private static Properties props = new Properties(); // Stocke les propri√©t√©s en m√©moire

    /**
     * Charge les param√®tres de connexion √† partir de `config.enc`.
     */
    public static void loadProperties() throws Exception {
        File fichierChiffre = new File(CONFIG_FILE_ENCRYPTED);

        if (!fichierChiffre.exists()) {
            throw new FileNotFoundException("‚ùå ERREUR : Fichier `config.enc` introuvable !");
        }

        // Lire et d√©crypter `config.enc`
        String encryptedContent = new String(Files.readAllBytes(fichierChiffre.toPath()), StandardCharsets.UTF_8);
        String decryptedContent = ChiffreDechiffre.dechiffrerString(encryptedContent);

        // Charger les propri√©t√©s depuis le contenu d√©chiffr√©
        try (InputStream input = new ByteArrayInputStream(decryptedContent.getBytes(StandardCharsets.UTF_8))) {
            props.load(input);
        }

        System.out.println("üîì Param√®tres charg√©s avec succ√®s depuis `config.enc` !");
    }

    /**
     * Enregistre les param√®tres chiffr√©s dans `config.enc` (sans laisser de fichier en clair).
     */
    public static void saveAndEncryptProperties() throws Exception {
        // Convertir les propri√©t√©s en texte brut
        StringWriter writer = new StringWriter();
        props.store(writer, "Configuration s√©curis√©e");
        String plainContent = writer.toString();

        // Chiffrer le contenu et l'enregistrer dans `config.enc`
        String encryptedContent = ChiffreDechiffre.chiffrerString(plainContent);
        try (FileWriter fw = new FileWriter(CONFIG_FILE_ENCRYPTED)) {
            fw.write(encryptedContent);
        }

        System.out.println("‚úÖ `config.enc` a √©t√© g√©n√©r√© avec succ√®s !");
    }

    /**
     * D√©finit une propri√©t√© (cl√©-valeur) en m√©moire.
     */
    public static void setProperty(String key, String value) {
        props.setProperty(key, value);
    }

    /**
     * R√©cup√®re une propri√©t√© depuis les param√®tres charg√©s.
     */
    public static String getProperty(String key) {
        return props.getProperty(key);
    }

    /**
     * V√©rifie le contenu chiffr√© et d√©chiffr√© de `config.enc` (√† des fins de test).
     */
    public static void debugEncryptedFile() throws Exception {
        File fichierChiffre = new File(CONFIG_FILE_ENCRYPTED);
        if (!fichierChiffre.exists()) {
            System.err.println("‚ùå ERREUR : `config.enc` n'existe pas !");
            return;
        }

        String encryptedContent = new String(Files.readAllBytes(fichierChiffre.toPath()), StandardCharsets.UTF_8);
        System.out.println("üîê Contenu chiffr√© de `config.enc` :\n" + encryptedContent);

        String decryptedContent = ChiffreDechiffre.dechiffrerString(encryptedContent);
        System.out.println("üîì Contenu d√©chiffr√© :\n" + decryptedContent);
    }

    /*public static void main(String[] args) {
        try {
            // 1Ô∏è‚É£ D√©finir les param√®tres de connexion (remplace par tes vraies valeurs)
            setProperty("db.driver", "org.postgresql.Driver");
            setProperty("db.url", "jdbc:postgresql://localhost:5432/gestion_stock");
            setProperty("db.user", "postgres");
            setProperty("db.password", "admin123");  // ‚ö†Ô∏è Remplace par ton vrai mot de passe PostgreSQL

            // 2Ô∏è‚É£ Chiffrer et sauvegarder
            saveAndEncryptProperties();

            // 3Ô∏è‚É£ Tester la lecture des param√®tres chiffr√©s
            loadProperties();
            debugEncryptedFile();

        } catch (Exception e) {
            System.err.println("‚ùå Erreur : " + e.getMessage());
        }
    }*/
}
